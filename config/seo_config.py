#!/usr/bin/env python3
"""
seo_config.py

Configura√ß√µes centralizadas para SEO e gera√ß√£o de HTML.
Todas as configura√ß√µes espec√≠ficas de cada artigo ficam aqui.
"""

from typing import Dict, Any

# Configura√ß√µes globais padr√£o
DEFAULT_CONFIG = {
    'author': 'Christian V. Mulato',
    'base_url': 'https://christian-mulato.dev',
    'language': 'pt-BR',
    'theme_color': '#667eea',
    'site_name': 'Christian V. Mulato',
    'twitter_handle': '@christianv.mulato',
    'social_image_size': {
        'width': 1200,
        'height': 630
    },
    'default_category': 'Technology',
    'default_reading_time': '5 min'
}

# Configura√ß√µes espec√≠ficas para cada arquivo
ARTICLE_CONFIGS = {
    'futuro_programacao.md': {
        'title': 'Da Prancheta ao Prompt: O Futuro da Cria√ß√£o de Softwares com IA',
        'description': 'Reflex√£o sobre como a intelig√™ncia artificial est√° transformando o desenvolvimento de software, comparando com a revolu√ß√£o do AutoCAD na engenharia civil.',
        'keywords': 'intelig√™ncia artificial, programa√ß√£o, AutoCAD, desenvolvimento de software, IA, futuro da programa√ß√£o, prompt, prancheta',
        'category': 'Technology',
        'tags': ['IA', 'Programa√ß√£o', 'AutoCAD', 'Desenvolvimento', 'Futuro'],
        'reading_time': '8 min',
        'social_image': 'futuro_programacao.png',
        'custom_css': None
    },
    
    'parte1-fundamentos.md': {
        'title': 'Parte I: Fundamentos do Apache Kafka',
        'description': 'Guia completo sobre os fundamentos do Apache Kafka com Java, incluindo produtores e consumidores. Aprenda streaming de dados e arquitetura event-driven.',
        'keywords': 'Apache Kafka, Java, fundamentos, streaming, produ√ß√£o, consumo, programa√ß√£o, microservices, event-driven',
        'category': 'Programming',
        'tags': ['Kafka', 'Java', 'Streaming', 'Microservices', 'Event-Driven'],
        'reading_time': '15 min',
        'social_image': 'kafka-java-parte1.png',
        'custom_css': None
    },
    
    'parte2-java.md': {
        'title': 'Parte II: Java com Apache Kafka',
        'description': 'Aprenda Java avan√ßado com Apache Kafka, incluindo serializa√ß√£o, particionamento, configura√ß√µes de performance e pr√°ticas de produ√ß√£o.',
        'keywords': 'Apache Kafka, Java, avan√ßado, serializa√ß√£o, particionamento, streaming, performance, configura√ß√£o',
        'category': 'Programming',
        'tags': ['Kafka', 'Java', 'Avan√ßado', 'Serializa√ß√£o', 'Performance'],
        'reading_time': '20 min',
        'social_image': 'kafka-java-parte2.png',
        'custom_css': None
    },
    
    'parte-final-avancado.md': {
        'title': 'Parte Final: Kafka Avan√ßado e Produ√ß√£o',
        'description': 'Configura√ß√µes avan√ßadas do Apache Kafka para produ√ß√£o, incluindo monitoramento, seguran√ßa, Kafka Streams e boas pr√°ticas.',
        'keywords': 'Apache Kafka, produ√ß√£o, monitoramento, seguran√ßa, Kafka Streams, DevOps, observabilidade',
        'category': 'DevOps',
        'tags': ['Kafka', 'Produ√ß√£o', 'Monitoramento', 'Seguran√ßa', 'DevOps'],
        'reading_time': '25 min',
        'social_image': 'kafka-java-parte-final.png',
        'custom_css': None
    },
    
    'guia-completo.md': {
        'title': 'Guia Completo: Apache Kafka com Java',
        'description': 'Guia completo e abrangente sobre Apache Kafka com Java, desde fundamentos at√© configura√ß√µes avan√ßadas de produ√ß√£o.',
        'keywords': 'Apache Kafka, Java, guia completo, streaming, microservices, produ√ß√£o, desenvolvimento',
        'category': 'Programming',
        'tags': ['Kafka', 'Java', 'Guia', 'Streaming', 'Completo'],
        'reading_time': '30 min',
        'social_image': 'kafka-java-guia.png',
        'custom_css': None
    }
}

def get_config_for_file(filename: str) -> Dict[str, Any]:
    """
    Obt√©m a configura√ß√£o completa para um arquivo espec√≠fico.
    Combina configura√ß√µes padr√£o com configura√ß√µes espec√≠ficas do arquivo.
    """
    # Come√ßar com configura√ß√µes padr√£o
    config = DEFAULT_CONFIG.copy()
    
    # Aplicar configura√ß√µes espec√≠ficas do arquivo se existirem
    if filename in ARTICLE_CONFIGS:
        file_config = ARTICLE_CONFIGS[filename]
        config.update(file_config)
    
    # Garantir que campos obrigat√≥rios existam
    if 'title' not in config:
        config['title'] = filename.replace('.md', '').replace('-', ' ').title()
    
    if 'description' not in config:
        config['description'] = f"Artigo sobre {config['title']}"
    
    if 'keywords' not in config:
        config['keywords'] = config['title'].lower().replace(' ', ', ')
    
    # Construir URL completa
    if 'base_url' in config:
        html_filename = filename.replace('.md', '.html')
        config['canonical_url'] = f"{config['base_url'].rstrip('/')}/{html_filename}"
        
        # URL da imagem social
        if 'social_image' in config:
            config['social_image_url'] = f"{config['base_url'].rstrip('/')}/assets/images/{config['social_image']}"
    
    return config

def get_all_article_configs() -> Dict[str, Dict[str, Any]]:
    """
    Retorna configura√ß√µes completas para todos os artigos.
    """
    configs = {}
    for filename in ARTICLE_CONFIGS.keys():
        configs[filename] = get_config_for_file(filename)
    return configs

def add_article_config(filename: str, config: Dict[str, Any]):
    """
    Adiciona configura√ß√£o para um novo artigo.
    """
    ARTICLE_CONFIGS[filename] = config

def update_default_config(new_config: Dict[str, Any]):
    """
    Atualiza configura√ß√µes padr√£o.
    """
    DEFAULT_CONFIG.update(new_config)

# Exemplo de uso
if __name__ == "__main__":
    # Testar configura√ß√µes
    print("üîß Testando Configura√ß√µes de SEO")
    print("=" * 40)
    
    # Testar configura√ß√£o de um arquivo espec√≠fico
    config = get_config_for_file('futuro_programacao.md')
    print(f"Configura√ß√£o para 'futuro_programacao.md':")
    for key, value in config.items():
        print(f"  {key}: {value}")
    
    print("\n" + "=" * 40)
    
    # Listar todos os artigos configurados
    print(f"Artigos configurados:")
    for filename in ARTICLE_CONFIGS.keys():
        print(f"  ‚Ä¢ {filename}")
    
    print(f"\nTotal: {len(ARTICLE_CONFIGS)} artigos configurados")
