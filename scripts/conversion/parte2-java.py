#!/usr/bin/env python3
"""
parte2-java.py

Script para converter parte2-java.md em HTML com SEO otimizado.
Vers√£o avan√ßada com integra√ß√£o ao sistema de configura√ß√µes.
"""

import sys
import subprocess
from pathlib import Path
import json
import os

# Importa configura√ß√µes se dispon√≠vel
try:
    from html_config import get_config_for_file
    CONFIG_AVAILABLE = True
except ImportError:
    CONFIG_AVAILABLE = False

def get_article_config():
    """Obt√©m configura√ß√µes espec√≠ficas para este artigo."""
    if CONFIG_AVAILABLE:
        config = get_config_for_file('parte2-java.md')
        # Adiciona campos necess√°rios que podem n√£o estar no config
        config.update({
            'md_file': 'articles_md/parte2-java.md',
            'html_file': 'output/parte2-java.html'
        })
        return config
    else:
        # Configura√ß√µes padr√£o se n√£o houver arquivo de config
        return {
            'md_file': 'articles_md/parte2-java.md',
            'html_file': 'output/parte2-java.html',
            'author': 'Christian V. Mulato',
            'url': 'https://christian-mulato.dev',
            'keywords': 'parte2, java, programa√ß√£o, tecnologia, Christian V. Mulato',
            'description': 'Curso avan√ßado de Apache Kafka com Java, cobrindo t√≥picos como serializa√ß√£o, particionamento e configura√ß√µes avan√ßadas para alta performance.',
            'category': 'Programming',
            'reading_time': '20 min',
            'social_image': 'parte2-java.png',
            'language': 'pt-BR'
        }

def validate_environment(config):
    """Valida se o ambiente est√° configurado corretamente."""
    issues = []
    
    # Verifica se o arquivo MD existe
    md_file = Path(config['md_file'])
    if not md_file.exists():
        issues.append(f"[ERROR] Arquivo {md_file} n√£o encontrado")
    
    # Verifica se o script format-html-seo.py existe
    if not Path('format-html-seo.py').exists():
        issues.append("[ERROR] Script format-html-seo.py n√£o encontrado")
    
    # Verifica depend√™ncias
    try:
        import markdown
        from bs4 import BeautifulSoup
    except ImportError as e:
        issues.append(f"[ERROR] Depend√™ncia faltando: {e}")
    
    return issues

def print_conversion_stats(config):
    """Exibe estat√≠sticas sobre a convers√£o."""
    md_file = Path(config['md_file'])
    html_file = Path(config['html_file'])
    
    if md_file.exists():
        md_size = md_file.stat().st_size
        print(f"[MD] Arquivo MD: {md_size:,} bytes")
    
    if html_file.exists():
        html_size = html_file.stat().st_size
        print(f"[WEB] Arquivo HTML: {html_size:,} bytes")
        
        # Calcula estat√≠sticas aproximadas
        estimated_load_time = html_size / (1024 * 50)  # ~50KB/s estimado
        print(f"[SPEED] Tempo de carregamento estimado: {estimated_load_time:.2f}s")

def main():
    """Converte parte2-java.md para HTML com SEO."""
    
    print("[INFO] Kafka Java Mastery - Parte 2: Java Avan√ßado")
    print("=" * 50)
    
    # Obt√©m configura√ß√µes
    config = get_article_config()
    
    # Valida ambiente
    issues = validate_environment(config)
    if issues:
        print("‚ö†Ô∏è  Problemas encontrados:")
        for issue in issues:
            print(f"  {issue}")
        return 1
    
    try:
        print(f"[CONFIG] Configura√ß√µes:")
        print(f"  ‚Ä¢ Arquivo MD: {config['md_file']}")
        print(f"  ‚Ä¢ Arquivo HTML: {config['html_file']}")
        print(f"  ‚Ä¢ Autor: {config['author']}")
        print(f"  ‚Ä¢ URL: {config['url']}")
        print(f"  ‚Ä¢ Categoria: {config.get('category', 'N/A')}")
        print(f"  ‚Ä¢ Tempo de leitura: {config.get('reading_time', 'N/A')}")
        
        # Prepara comando de convers√£o
        cmd = [
            sys.executable, 'format-html-seo.py',
            config['md_file'], config['html_file'],
            '--author', config['author'],
            '--url', config['url'],
            '--lang', config.get('language', 'pt-BR')
        ]
        
        print(f"\n[PROCESS] Iniciando convers√£o...")
        print(f"[FILE] Processando: {config['md_file']}")
        
        # Executa convers√£o
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"\n[SUCCESS] Convers√£o conclu√≠da com sucesso!")
            print(result.stdout)
            
            # Informa√ß√µes do arquivo gerado
            print(f"\n[DATA] Arquivo gerado:")
            print(f"  üìÅ Local: {config['html_file']}")
            print(f"  [WEB] URL: {config['url']}/{Path(config['html_file']).stem}.html")
            print(f"  [MOBILE] Otimizado para SEO e redes sociais")
            
            # Estat√≠sticas
            print(f"\n[STATS] Estat√≠sticas:")
            print_conversion_stats(config)
            
            # Recursos SEO inclu√≠dos
            print(f"\n[SEO] Recursos SEO inclu√≠dos:")
            seo_features = [
                "Meta tags otimizadas (title, description, keywords)",
                "Open Graph para redes sociais (Facebook, LinkedIn, WhatsApp)",
                "Twitter Cards para compartilhamento",
                "Schema.org structured data (JSON-LD)",
                "Design responsivo mobile-first",
                "Syntax highlighting para c√≥digo",
                "Lazy loading para imagens",
                "Links externos seguros",
                "Estrutura sem√¢ntica HTML5",
                "Performance otimizada"
            ]
            
            for i, feature in enumerate(seo_features, 1):
                print(f"  {i:2d}. {feature}")
            
            # Pr√≥ximos passos
            print(f"\n[PROCESS] Pr√≥ximos passos:")
            print(f"  1. Abrir {config['html_file']} no navegador")
            print(f"  2. Testar responsividade em dispositivos m√≥veis")
            print(f"  3. Validar SEO com ferramentas online")
            print(f"  4. Publicar no servidor web")
            print(f"  5. Compartilhar nas redes sociais")
            
            # Informa√ß√µes espec√≠ficas do conte√∫do
            print(f"\n[DEV] Recursos do conte√∫do:")
            dev_features = [
                "Serializa√ß√£o avan√ßada e custom serializers",
                "Particionamento e balanceamento de carga",
                "Configura√ß√µes de performance e tuning",
                "Exemplos avan√ßados de streaming",
            ]
            
            for i, feature in enumerate(dev_features, 1):
                print(f"  {i}. {feature}")
            
        else:
            print(f"[ERROR] Erro na convers√£o:")
            print(result.stderr)
            return 1
            
        return 0
        
    except Exception as e:
        print(f"[ERROR] Erro inesperado: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
